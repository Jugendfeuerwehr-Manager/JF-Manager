version: '3.8'

services:
  db:
    container_name: jf_manager_db
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jf_manager_backend}
      POSTGRES_USER: ${POSTGRES_USER:-jf_manager}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jf_manager"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - database:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 1G

  redis:
    container_name: jf_manager_redis
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M

  app:
    container_name: jf_manager_app
    image: jf_manager_backend:latest
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-jf_manager}:${POSTGRES_PASSWORD:-changeme}@db/${POSTGRES_DB:-jf_manager_backend}
      REDIS_URL: redis://redis:6379
      DJANGO_MANAGEPY_MIGRATE: ${DJANGO_MANAGEPY_MIGRATE:-on}
      DJANGO_ADMIN_PASSWORD: ${DJANGO_ADMIN_PASSWORD}
      DJANGO_ADMIN_EMAIL: ${DJANGO_ADMIN_EMAIL}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8000:8000"
    volumes:
      - static:/static
      - uploads:/uploads
    deploy:
      resources:
        limits:
          memory: 2G

volumes:
  database:
  static:
  uploads: