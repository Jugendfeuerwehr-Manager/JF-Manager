/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api-token-auth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_token_auth_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["auth_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a token and indicates if it is valid.  This view provides no
         *     information about a token's fitness for a particular use. */
        post: operations["auth_verify_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/event-types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all event types */
        get: operations["event_types_list"];
        put?: never;
        /** Create new event type */
        post: operations["event_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/event-types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event type details */
        get: operations["event_types_retrieve"];
        /** Update event type */
        put: operations["event_types_update"];
        post?: never;
        /** Delete event type */
        delete: operations["event_types_destroy"];
        options?: never;
        head?: never;
        /** Partially update event type */
        patch: operations["event_types_partial_update"];
        trace?: never;
    };
    "/api/v1/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all events
         * @description Get all member events
         */
        get: operations["events_list"];
        put?: never;
        /** Create new event */
        post: operations["events_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event details */
        get: operations["events_retrieve"];
        /** Update event */
        put: operations["events_update"];
        post?: never;
        /** Delete event */
        delete: operations["events_destroy"];
        options?: never;
        head?: never;
        /** Partially update event */
        patch: operations["events_partial_update"];
        trace?: never;
    };
    "/api/v1/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all groups
         * @description Get all member groups
         */
        get: operations["groups_list"];
        put?: never;
        /** Create new group */
        post: operations["groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get group details */
        get: operations["groups_retrieve"];
        /** Update group */
        put: operations["groups_update"];
        post?: never;
        /** Delete group */
        delete: operations["groups_destroy"];
        options?: never;
        head?: never;
        /** Partially update group */
        patch: operations["groups_partial_update"];
        trace?: never;
    };
    "/api/v1/inventory/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_categories_list"];
        put?: never;
        post: operations["inventory_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_categories_retrieve"];
        put: operations["inventory_categories_update"];
        post?: never;
        delete: operations["inventory_categories_destroy"];
        options?: never;
        head?: never;
        patch: operations["inventory_categories_partial_update"];
        trace?: never;
    };
    "/api/v1/inventory/categories/{id}/items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_categories_items_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_items_list"];
        put?: never;
        post: operations["inventory_items_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/items/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_items_retrieve"];
        put: operations["inventory_items_update"];
        post?: never;
        delete: operations["inventory_items_destroy"];
        options?: never;
        head?: never;
        patch: operations["inventory_items_partial_update"];
        trace?: never;
    };
    "/api/v1/inventory/items/{id}/stock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_items_stock_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/items/{id}/variants/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_items_variants_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/items/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_items_search_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/locations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_locations_list"];
        put?: never;
        post: operations["inventory_locations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/locations/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_locations_retrieve"];
        put: operations["inventory_locations_update"];
        post?: never;
        delete: operations["inventory_locations_destroy"];
        options?: never;
        head?: never;
        patch: operations["inventory_locations_partial_update"];
        trace?: never;
    };
    "/api/v1/inventory/locations/{id}/stock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_locations_stock_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/stocks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_stocks_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/stocks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_stocks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_transactions_list"];
        put?: never;
        post: operations["inventory_transactions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/transactions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_transactions_retrieve"];
        put: operations["inventory_transactions_update"];
        post?: never;
        delete: operations["inventory_transactions_destroy"];
        options?: never;
        head?: never;
        patch: operations["inventory_transactions_partial_update"];
        trace?: never;
    };
    "/api/v1/inventory/variants/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_variants_list"];
        put?: never;
        post: operations["inventory_variants_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/variants/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_variants_retrieve"];
        put: operations["inventory_variants_update"];
        post?: never;
        delete: operations["inventory_variants_destroy"];
        options?: never;
        head?: never;
        patch: operations["inventory_variants_partial_update"];
        trace?: never;
    };
    "/api/v1/inventory/variants/{id}/stock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["inventory_variants_stock_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all members
         * @description Get a paginated list of all members with filtering and sorting
         */
        get: operations["members_list"];
        put?: never;
        /**
         * Create new member
         * @description Create a new member
         */
        post: operations["members_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get member details
         * @description Get detailed information about a specific member
         */
        get: operations["members_retrieve"];
        /**
         * Update member
         * @description Update all member fields
         */
        put: operations["members_update"];
        post?: never;
        /**
         * Delete member
         * @description Delete a member
         */
        delete: operations["members_destroy"];
        options?: never;
        head?: never;
        /**
         * Partially update member
         * @description Update specific member fields
         */
        patch: operations["members_partial_update"];
        trace?: never;
    };
    "/api/v1/members/{id}/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get member's events
         * @description Get all events associated with this member
         */
        get: operations["members_events_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/{id}/parents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get member's parents
         * @description Get all parents associated with this member
         */
        get: operations["members_parents_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/statistics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get member statistics
         * @description Get statistics about members (total, active, by status, etc.)
         */
        get: operations["members_statistics_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für Bestellungen */
        get: operations["orders_list"];
        put?: never;
        /** @description API Endpoint für Bestellungen */
        post: operations["orders_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für Bestellungen */
        get: operations["orders_retrieve"];
        /** @description API Endpoint für Bestellungen */
        put: operations["orders_update"];
        post?: never;
        /** @description API Endpoint für Bestellungen */
        delete: operations["orders_destroy"];
        options?: never;
        head?: never;
        /** @description API Endpoint für Bestellungen */
        patch: operations["orders_partial_update"];
        trace?: never;
    };
    "/api/v1/orders/items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für Bestellartikel */
        get: operations["orders_items_list"];
        put?: never;
        /** @description API Endpoint für Bestellartikel */
        post: operations["orders_items_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/items/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für Bestellartikel */
        get: operations["orders_items_retrieve"];
        /** @description API Endpoint für Bestellartikel */
        put: operations["orders_items_update"];
        post?: never;
        /** @description API Endpoint für Bestellartikel */
        delete: operations["orders_items_destroy"];
        options?: never;
        head?: never;
        /** @description API Endpoint für Bestellartikel */
        patch: operations["orders_items_partial_update"];
        trace?: never;
    };
    "/api/v1/orders/orderable-items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für bestellbare Artikel */
        get: operations["orders_orderable_items_list"];
        put?: never;
        /** @description API Endpoint für bestellbare Artikel */
        post: operations["orders_orderable_items_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/orderable-items/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für bestellbare Artikel */
        get: operations["orders_orderable_items_retrieve"];
        /** @description API Endpoint für bestellbare Artikel */
        put: operations["orders_orderable_items_update"];
        post?: never;
        /** @description API Endpoint für bestellbare Artikel */
        delete: operations["orders_orderable_items_destroy"];
        options?: never;
        head?: never;
        /** @description API Endpoint für bestellbare Artikel */
        patch: operations["orders_orderable_items_partial_update"];
        trace?: never;
    };
    "/api/v1/orders/statuses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für Bestellstatus */
        get: operations["orders_statuses_list"];
        put?: never;
        /** @description API Endpoint für Bestellstatus */
        post: operations["orders_statuses_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/statuses/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für Bestellstatus */
        get: operations["orders_statuses_retrieve"];
        /** @description API Endpoint für Bestellstatus */
        put: operations["orders_statuses_update"];
        post?: never;
        /** @description API Endpoint für Bestellstatus */
        delete: operations["orders_statuses_destroy"];
        options?: never;
        head?: never;
        /** @description API Endpoint für Bestellstatus */
        patch: operations["orders_statuses_partial_update"];
        trace?: never;
    };
    "/api/v1/parents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all parents
         * @description Get a paginated list of all parents
         */
        get: operations["parents_list"];
        put?: never;
        /**
         * Create new parent
         * @description Create a new parent
         */
        post: operations["parents_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/parents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get parent details
         * @description Get detailed information about a specific parent
         */
        get: operations["parents_retrieve"];
        /**
         * Update parent
         * @description Update all parent fields
         */
        put: operations["parents_update"];
        post?: never;
        /**
         * Delete parent
         * @description Delete a parent
         */
        delete: operations["parents_destroy"];
        options?: never;
        head?: never;
        /**
         * Partially update parent
         * @description Update specific parent fields
         */
        patch: operations["parents_partial_update"];
        trace?: never;
    };
    "/api/v1/qualifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Qualifikationen */
        get: operations["qualifications_list"];
        put?: never;
        /** @description ViewSet für Qualifikationen */
        post: operations["qualifications_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/qualifications/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Qualifikationen */
        get: operations["qualifications_retrieve"];
        /** @description ViewSet für Qualifikationen */
        put: operations["qualifications_update"];
        post?: never;
        /** @description ViewSet für Qualifikationen */
        delete: operations["qualifications_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet für Qualifikationen */
        patch: operations["qualifications_partial_update"];
        trace?: never;
    };
    "/api/v1/qualifications/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Qualifikationstypen */
        get: operations["qualifications_types_list"];
        put?: never;
        /** @description ViewSet für Qualifikationstypen */
        post: operations["qualifications_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/qualifications/types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Qualifikationstypen */
        get: operations["qualifications_types_retrieve"];
        /** @description ViewSet für Qualifikationstypen */
        put: operations["qualifications_types_update"];
        post?: never;
        /** @description ViewSet für Qualifikationstypen */
        delete: operations["qualifications_types_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet für Qualifikationstypen */
        patch: operations["qualifications_types_partial_update"];
        trace?: never;
    };
    "/api/v1/servicebook/attandances/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint that allows Attandance to be viewed or edited - nur für authentifizierte und berechtigte Benutzer
         *
         *     search is indexed to person name and lastname */
        get: operations["servicebook_attandances_list"];
        put?: never;
        /** @description API Endpoint that allows Attandance to be viewed or edited - nur für authentifizierte und berechtigte Benutzer
         *
         *     search is indexed to person name and lastname */
        post: operations["servicebook_attandances_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/servicebook/attandances/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint that allows Attandance to be viewed or edited - nur für authentifizierte und berechtigte Benutzer
         *
         *     search is indexed to person name and lastname */
        get: operations["servicebook_attandances_retrieve"];
        /** @description API Endpoint that allows Attandance to be viewed or edited - nur für authentifizierte und berechtigte Benutzer
         *
         *     search is indexed to person name and lastname */
        put: operations["servicebook_attandances_update"];
        post?: never;
        /** @description API Endpoint that allows Attandance to be viewed or edited - nur für authentifizierte und berechtigte Benutzer
         *
         *     search is indexed to person name and lastname */
        delete: operations["servicebook_attandances_destroy"];
        options?: never;
        head?: never;
        /** @description API Endpoint that allows Attandance to be viewed or edited - nur für authentifizierte und berechtigte Benutzer
         *
         *     search is indexed to person name and lastname */
        patch: operations["servicebook_attandances_partial_update"];
        trace?: never;
    };
    "/api/v1/servicebook/services/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint that allows Service to be viewed or edited - nur für authentifizierte und berechtigte Benutzer */
        get: operations["servicebook_services_list"];
        put?: never;
        /** @description API Endpoint that allows Service to be viewed or edited - nur für authentifizierte und berechtigte Benutzer */
        post: operations["servicebook_services_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/servicebook/services/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint that allows Service to be viewed or edited - nur für authentifizierte und berechtigte Benutzer */
        get: operations["servicebook_services_retrieve"];
        /** @description API Endpoint that allows Service to be viewed or edited - nur für authentifizierte und berechtigte Benutzer */
        put: operations["servicebook_services_update"];
        post?: never;
        /** @description API Endpoint that allows Service to be viewed or edited - nur für authentifizierte und berechtigte Benutzer */
        delete: operations["servicebook_services_destroy"];
        options?: never;
        head?: never;
        /** @description API Endpoint that allows Service to be viewed or edited - nur für authentifizierte und berechtigte Benutzer */
        patch: operations["servicebook_services_partial_update"];
        trace?: never;
    };
    "/api/v1/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application settings
         * @description Get public application settings like app name, contact emails, etc.
         */
        get: operations["settings_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/specialtasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Sonderaufgaben */
        get: operations["specialtasks_list"];
        put?: never;
        /** @description ViewSet für Sonderaufgaben */
        post: operations["specialtasks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/specialtasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Sonderaufgaben */
        get: operations["specialtasks_retrieve"];
        /** @description ViewSet für Sonderaufgaben */
        put: operations["specialtasks_update"];
        post?: never;
        /** @description ViewSet für Sonderaufgaben */
        delete: operations["specialtasks_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet für Sonderaufgaben */
        patch: operations["specialtasks_partial_update"];
        trace?: never;
    };
    "/api/v1/specialtasks/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Sonderaufgaben-Typen */
        get: operations["specialtasks_types_list"];
        put?: never;
        /** @description ViewSet für Sonderaufgaben-Typen */
        post: operations["specialtasks_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/specialtasks/types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet für Sonderaufgaben-Typen */
        get: operations["specialtasks_types_retrieve"];
        /** @description ViewSet für Sonderaufgaben-Typen */
        put: operations["specialtasks_types_update"];
        post?: never;
        /** @description ViewSet für Sonderaufgaben-Typen */
        delete: operations["specialtasks_types_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet für Sonderaufgaben-Typen */
        patch: operations["specialtasks_types_partial_update"];
        trace?: never;
    };
    "/api/v1/statuses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all statuses
         * @description Get all member statuses
         */
        get: operations["statuses_list"];
        put?: never;
        /** Create new status */
        post: operations["statuses_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/statuses/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status details */
        get: operations["statuses_retrieve"];
        /** Update status */
        put: operations["statuses_update"];
        post?: never;
        /** Delete status */
        delete: operations["statuses_destroy"];
        options?: never;
        head?: never;
        /** Partially update status */
        patch: operations["statuses_partial_update"];
        trace?: never;
    };
    "/api/v1/userinfo/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application settings
         * @description Get public application settings like app name, contact emails, etc.
         */
        get: operations["userinfo_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all users
         * @description Get a paginated list of all users
         */
        get: operations["users_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user details
         * @description Get detailed information about a specific user
         */
        get: operations["users_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Partially update user
         * @description Update specific user fields
         */
        patch: operations["users_partial_update"];
        trace?: never;
    };
    "/api/v1/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user info
         * @description Get complete information about the currently authenticated user including permissions and groups
         */
        get: operations["users_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/members.xlsx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Endpoint für Mitglieder-Export als Excel - nur für authentifizierte und berechtigte Benutzer */
        get: operations["members_members.xlsx_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Attendance: {
            readonly id: number;
            state?: (components["schemas"]["StateEnum"] | components["schemas"]["NullEnum"]) | null;
            person?: number | null;
            service?: number | null;
        };
        AttendanceRequest: {
            state?: (components["schemas"]["StateEnum"] | components["schemas"]["NullEnum"]) | null;
            person?: number | null;
            service?: number | null;
        };
        AuthToken: {
            readonly token: string;
        };
        AuthTokenRequest: {
            /** Benutzername */
            username: string;
            /** Passwort */
            password: string;
        };
        Category: {
            readonly id: number;
            name: string;
            /** @description Variable Attribute pro Kategorie (z.B. {"größe": "string", "farbe": "string"}) */
            schema?: unknown;
            readonly item_count: number;
        };
        CategoryRequest: {
            name: string;
            /** @description Variable Attribute pro Kategorie (z.B. {"größe": "string", "farbe": "string"}) */
            schema?: unknown;
        };
        Event: {
            readonly id: number;
            member?: number | null;
            readonly member_name: string;
            type?: number | null;
            readonly event_type: components["schemas"]["EventType"];
            /**
             * Datum
             * Format: date
             */
            datetime: string;
            /** Bemerkungen */
            notes?: string;
        };
        EventRequest: {
            member?: number | null;
            type?: number | null;
            type_id?: number;
            /**
             * Datum
             * Format: date
             */
            datetime: string;
            /** Bemerkungen */
            notes?: string;
        };
        EventType: {
            readonly id: number;
            /** Ereignistyp */
            name?: string;
        };
        EventTypeRequest: {
            /** Ereignistyp */
            name?: string;
        };
        Group: {
            readonly id: number;
            /** Gruppenname */
            name?: string;
        };
        GroupRequest: {
            /** Gruppenname */
            name?: string;
        };
        Item: {
            readonly id: number;
            name?: string;
            /** Kategorie */
            category?: number | null;
            readonly category_name: string;
            /** Grundeinheit */
            base_unit?: string;
            /**
             * Basis-Attribute
             * @description Grundlegende Attribute des Artikels (z.B. {"marke": "Adidas", "typ": "Hose"})
             */
            attributes?: unknown;
            /**
             * Hat Varianten
             * @description Markieren Sie dies, wenn dieser Artikel Varianten hat (z.B. verschiedene Größen)
             */
            is_variant_parent?: boolean;
            /** Größe  */
            size?: string;
            /** Inventarnummer Hand */
            identifier1?: string;
            /** Inventarnummer Barcode */
            identifier2?: string;
            /** Ausgeliehen von */
            rented_by?: number | null;
            readonly total_stock: number;
            readonly variants: components["schemas"]["ItemVariant"][];
        };
        ItemRequest: {
            name?: string;
            /** Kategorie */
            category?: number | null;
            /** Grundeinheit */
            base_unit?: string;
            /**
             * Basis-Attribute
             * @description Grundlegende Attribute des Artikels (z.B. {"marke": "Adidas", "typ": "Hose"})
             */
            attributes?: unknown;
            /**
             * Hat Varianten
             * @description Markieren Sie dies, wenn dieser Artikel Varianten hat (z.B. verschiedene Größen)
             */
            is_variant_parent?: boolean;
            /** Größe  */
            size?: string;
            /** Inventarnummer Hand */
            identifier1?: string;
            /** Inventarnummer Barcode */
            identifier2?: string;
            /** Ausgeliehen von */
            rented_by?: number | null;
        };
        ItemVariant: {
            readonly id: number;
            /** Hauptartikel */
            parent_item: number;
            readonly parent_item_name: string;
            readonly category_id: number;
            readonly category_name: string;
            /**
             * SKU/Artikelnummer
             * @description Eindeutige Artikelnummer für diese Variante
             */
            sku?: string;
            /**
             * Varianten-Attribute
             * @description Spezifische Attribute dieser Variante (z.B. {"größe": "164", "farbe": "blau"})
             */
            variant_attributes: unknown;
            readonly total_stock: number;
        };
        ItemVariantRequest: {
            /** Hauptartikel */
            parent_item: number;
            /**
             * SKU/Artikelnummer
             * @description Eindeutige Artikelnummer für diese Variante
             */
            sku?: string;
            /**
             * Varianten-Attribute
             * @description Spezifische Attribute dieser Variante (z.B. {"größe": "164", "farbe": "blau"})
             */
            variant_attributes: unknown;
        };
        /** @description Serializer for create/update operations */
        MemberCreateUpdate: {
            readonly id: number;
            name?: string;
            /** Nachname */
            lastname?: string;
            /**
             * Geburtstag
             * Format: date
             */
            birthday?: string | null;
            /** E-Mail */
            email?: string;
            /** Straße */
            street?: string;
            /** PLZ */
            zip_code?: string;
            /** Stadt / Ort */
            city?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Bemerkungen */
            notes?: string;
            /**
             * Eingetreten
             * Format: date
             */
            joined?: string | null;
            /** Ausweis Nr. */
            identityCardNumber?: string;
            /** Kann schwimmen */
            canSwimm?: boolean;
            status?: number | null;
            group?: number | null;
            /** Lagerplatz */
            storage_location?: number | null;
            /**
             * Ausweisbild
             * Format: uri
             */
            avatar?: string | null;
        };
        /** @description Serializer for create/update operations */
        MemberCreateUpdateRequest: {
            name?: string;
            /** Nachname */
            lastname?: string;
            /**
             * Geburtstag
             * Format: date
             */
            birthday?: string | null;
            /** E-Mail */
            email?: string;
            /** Straße */
            street?: string;
            /** PLZ */
            zip_code?: string;
            /** Stadt / Ort */
            city?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Bemerkungen */
            notes?: string;
            /**
             * Eingetreten
             * Format: date
             */
            joined?: string | null;
            /** Ausweis Nr. */
            identityCardNumber?: string;
            /** Kann schwimmen */
            canSwimm?: boolean;
            status?: number | null;
            group?: number | null;
            /** Lagerplatz */
            storage_location?: number | null;
            /**
             * Ausweisbild
             * Format: binary
             */
            avatar?: string | null;
        };
        /** @description Detailed serializer for single member views */
        MemberDetail: {
            readonly id: number;
            name?: string;
            /** Nachname */
            lastname?: string;
            readonly full_name: string;
            /**
             * Geburtstag
             * Format: date
             */
            birthday?: string | null;
            readonly age: number;
            /** E-Mail */
            email?: string;
            /** Straße */
            street?: string;
            /** PLZ */
            zip_code?: string;
            /** Stadt / Ort */
            city?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Bemerkungen */
            notes?: string;
            /**
             * Eingetreten
             * Format: date
             */
            joined?: string | null;
            /** Ausweis Nr. */
            identityCardNumber?: string;
            /** Kann schwimmen */
            canSwimm?: boolean;
            readonly status: components["schemas"]["Status"];
            readonly group: components["schemas"]["Group"];
            /** Lagerplatz */
            storage_location?: number | null;
            readonly parents: components["schemas"]["Parent"][];
            /**
             * Ausweisbild
             * Format: uri
             */
            avatar?: string | null;
            readonly avatar_url: string;
        };
        /** @description Lightweight serializer for list views */
        MemberList: {
            readonly id: number;
            name?: string;
            /** Nachname */
            lastname?: string;
            readonly full_name: string;
            /**
             * Geburtstag
             * Format: date
             */
            birthday?: string | null;
            readonly age: number;
            /** E-Mail */
            email?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Stadt / Ort */
            city?: string;
            /**
             * Eingetreten
             * Format: date
             */
            joined?: string | null;
            readonly status: components["schemas"]["Status"];
            readonly group: components["schemas"]["Group"];
            readonly avatar_url: string;
        };
        /** @enum {unknown} */
        NullEnum: null;
        Order: {
            readonly id: number;
            readonly member_name: string;
            readonly ordered_by_name: string;
            readonly items: components["schemas"]["OrderItem"][];
            /**
             * Bestelldatum
             * Format: date-time
             */
            readonly order_date: string;
            /** Bemerkungen */
            notes?: string;
            /** Mitglied */
            member: number;
            /** Bestellt von */
            ordered_by?: number | null;
        };
        OrderItem: {
            readonly id: number;
            readonly item_name: string;
            /** Status Name */
            readonly status_name: string;
            /**
             * Farbe
             * @description Hex-Farbcode für die Anzeige
             */
            readonly status_color: string;
            /** Größe */
            size?: string;
            /**
             * Anzahl
             * Format: int64
             */
            quantity?: number;
            /**
             * Eingangsdatum
             * Format: date-time
             */
            received_date?: string | null;
            /**
             * Ausgabedatum
             * Format: date-time
             */
            delivered_date?: string | null;
            /** Bemerkungen */
            notes?: string;
            /** Bestellung */
            order: number;
            /** Artikel */
            item: number;
            status: number;
        };
        OrderItemRequest: {
            /** Größe */
            size?: string;
            /**
             * Anzahl
             * Format: int64
             */
            quantity?: number;
            /**
             * Eingangsdatum
             * Format: date-time
             */
            received_date?: string | null;
            /**
             * Ausgabedatum
             * Format: date-time
             */
            delivered_date?: string | null;
            /** Bemerkungen */
            notes?: string;
            /** Bestellung */
            order: number;
            /** Artikel */
            item: number;
            status: number;
        };
        OrderRequest: {
            /** Bemerkungen */
            notes?: string;
            /** Mitglied */
            member: number;
            /** Bestellt von */
            ordered_by?: number | null;
        };
        OrderStatus: {
            readonly id: number;
            /** Status Name */
            name: string;
            /** Status Code */
            code: string;
            /** Beschreibung */
            description?: string;
            /**
             * Farbe
             * @description Hex-Farbcode für die Anzeige
             */
            color?: string;
            /** Aktiv */
            is_active?: boolean;
            /**
             * Sortierung
             * Format: int64
             */
            sort_order?: number;
        };
        OrderStatusRequest: {
            /** Status Name */
            name: string;
            /** Status Code */
            code: string;
            /** Beschreibung */
            description?: string;
            /**
             * Farbe
             * @description Hex-Farbcode für die Anzeige
             */
            color?: string;
            /** Aktiv */
            is_active?: boolean;
            /**
             * Sortierung
             * Format: int64
             */
            sort_order?: number;
        };
        OrderableItem: {
            readonly id: number;
            readonly sizes_list: string;
            name: string;
            /** Kategorie */
            category: string;
            /** Beschreibung */
            description?: string;
            /** Hat Größen */
            has_sizes?: boolean;
            /**
             * Verfügbare Größen
             * @description Größen kommagetrennt eingeben, z.B.: XS,S,M,L,XL oder 98,104,110,116
             */
            available_sizes?: string;
            /** Aktiv */
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        OrderableItemRequest: {
            name: string;
            /** Kategorie */
            category: string;
            /** Beschreibung */
            description?: string;
            /** Hat Größen */
            has_sizes?: boolean;
            /**
             * Verfügbare Größen
             * @description Größen kommagetrennt eingeben, z.B.: XS,S,M,L,XL oder 98,104,110,116
             */
            available_sizes?: string;
            /** Aktiv */
            is_active?: boolean;
        };
        PaginatedAttendanceList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Attendance"][];
        };
        PaginatedCategoryList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Category"][];
        };
        PaginatedEventList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Event"][];
        };
        PaginatedEventTypeList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["EventType"][];
        };
        PaginatedGroupList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Group"][];
        };
        PaginatedItemList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Item"][];
        };
        PaginatedItemVariantList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["ItemVariant"][];
        };
        PaginatedMemberListList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["MemberList"][];
        };
        PaginatedOrderItemList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["OrderItem"][];
        };
        PaginatedOrderList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Order"][];
        };
        PaginatedOrderStatusList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["OrderStatus"][];
        };
        PaginatedOrderableItemList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["OrderableItem"][];
        };
        PaginatedParentList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Parent"][];
        };
        PaginatedQualificationList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Qualification"][];
        };
        PaginatedQualificationTypeList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["QualificationType"][];
        };
        PaginatedServiceList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Service"][];
        };
        PaginatedSpecialTaskList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["SpecialTask"][];
        };
        PaginatedSpecialTaskTypeList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["SpecialTaskType"][];
        };
        PaginatedStatusList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Status"][];
        };
        PaginatedStockList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Stock"][];
        };
        PaginatedStorageLocationList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["StorageLocation"][];
        };
        PaginatedTransactionList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Transaction"][];
        };
        PaginatedUserList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["User"][];
        };
        Parent: {
            readonly id: number;
            name?: string;
            /** Nachname */
            lastname?: string;
            readonly full_name: string;
            /** E-Mail 1 */
            email?: string;
            /** E-Mail 2 */
            email2?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Straße */
            street?: string;
            /** PLZ */
            zip_code?: string;
            /** Stadt / Ort */
            city?: string;
            /** Bemerkungen */
            notes?: string;
            children?: number[];
        };
        ParentRequest: {
            name?: string;
            /** Nachname */
            lastname?: string;
            /** E-Mail 1 */
            email?: string;
            /** E-Mail 2 */
            email2?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Straße */
            street?: string;
            /** PLZ */
            zip_code?: string;
            /** Stadt / Ort */
            city?: string;
            /** Bemerkungen */
            notes?: string;
            children?: number[];
        };
        PatchedAttendanceRequest: {
            state?: (components["schemas"]["StateEnum"] | components["schemas"]["NullEnum"]) | null;
            person?: number | null;
            service?: number | null;
        };
        PatchedCategoryRequest: {
            name?: string;
            /** @description Variable Attribute pro Kategorie (z.B. {"größe": "string", "farbe": "string"}) */
            schema?: unknown;
        };
        PatchedEventRequest: {
            member?: number | null;
            type?: number | null;
            type_id?: number;
            /**
             * Datum
             * Format: date
             */
            datetime?: string;
            /** Bemerkungen */
            notes?: string;
        };
        PatchedEventTypeRequest: {
            /** Ereignistyp */
            name?: string;
        };
        PatchedGroupRequest: {
            /** Gruppenname */
            name?: string;
        };
        PatchedItemRequest: {
            name?: string;
            /** Kategorie */
            category?: number | null;
            /** Grundeinheit */
            base_unit?: string;
            /**
             * Basis-Attribute
             * @description Grundlegende Attribute des Artikels (z.B. {"marke": "Adidas", "typ": "Hose"})
             */
            attributes?: unknown;
            /**
             * Hat Varianten
             * @description Markieren Sie dies, wenn dieser Artikel Varianten hat (z.B. verschiedene Größen)
             */
            is_variant_parent?: boolean;
            /** Größe  */
            size?: string;
            /** Inventarnummer Hand */
            identifier1?: string;
            /** Inventarnummer Barcode */
            identifier2?: string;
            /** Ausgeliehen von */
            rented_by?: number | null;
        };
        PatchedItemVariantRequest: {
            /** Hauptartikel */
            parent_item?: number;
            /**
             * SKU/Artikelnummer
             * @description Eindeutige Artikelnummer für diese Variante
             */
            sku?: string;
            /**
             * Varianten-Attribute
             * @description Spezifische Attribute dieser Variante (z.B. {"größe": "164", "farbe": "blau"})
             */
            variant_attributes?: unknown;
        };
        /** @description Serializer for create/update operations */
        PatchedMemberCreateUpdateRequest: {
            name?: string;
            /** Nachname */
            lastname?: string;
            /**
             * Geburtstag
             * Format: date
             */
            birthday?: string | null;
            /** E-Mail */
            email?: string;
            /** Straße */
            street?: string;
            /** PLZ */
            zip_code?: string;
            /** Stadt / Ort */
            city?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Bemerkungen */
            notes?: string;
            /**
             * Eingetreten
             * Format: date
             */
            joined?: string | null;
            /** Ausweis Nr. */
            identityCardNumber?: string;
            /** Kann schwimmen */
            canSwimm?: boolean;
            status?: number | null;
            group?: number | null;
            /** Lagerplatz */
            storage_location?: number | null;
            /**
             * Ausweisbild
             * Format: binary
             */
            avatar?: string | null;
        };
        PatchedOrderItemRequest: {
            /** Größe */
            size?: string;
            /**
             * Anzahl
             * Format: int64
             */
            quantity?: number;
            /**
             * Eingangsdatum
             * Format: date-time
             */
            received_date?: string | null;
            /**
             * Ausgabedatum
             * Format: date-time
             */
            delivered_date?: string | null;
            /** Bemerkungen */
            notes?: string;
            /** Bestellung */
            order?: number;
            /** Artikel */
            item?: number;
            status?: number;
        };
        PatchedOrderRequest: {
            /** Bemerkungen */
            notes?: string;
            /** Mitglied */
            member?: number;
            /** Bestellt von */
            ordered_by?: number | null;
        };
        PatchedOrderStatusRequest: {
            /** Status Name */
            name?: string;
            /** Status Code */
            code?: string;
            /** Beschreibung */
            description?: string;
            /**
             * Farbe
             * @description Hex-Farbcode für die Anzeige
             */
            color?: string;
            /** Aktiv */
            is_active?: boolean;
            /**
             * Sortierung
             * Format: int64
             */
            sort_order?: number;
        };
        PatchedOrderableItemRequest: {
            name?: string;
            /** Kategorie */
            category?: string;
            /** Beschreibung */
            description?: string;
            /** Hat Größen */
            has_sizes?: boolean;
            /**
             * Verfügbare Größen
             * @description Größen kommagetrennt eingeben, z.B.: XS,S,M,L,XL oder 98,104,110,116
             */
            available_sizes?: string;
            /** Aktiv */
            is_active?: boolean;
        };
        PatchedParentRequest: {
            name?: string;
            /** Nachname */
            lastname?: string;
            /** E-Mail 1 */
            email?: string;
            /** E-Mail 2 */
            email2?: string;
            /** Telefon */
            phone?: string;
            /** Mobil */
            mobile?: string;
            /** Straße */
            street?: string;
            /** PLZ */
            zip_code?: string;
            /** Stadt / Ort */
            city?: string;
            /** Bemerkungen */
            notes?: string;
            children?: number[];
        };
        /** @description Serializer für Qualifikationen */
        PatchedQualificationRequest: {
            /** Qualifikationstyp */
            type?: number;
            /** Benutzer */
            user?: number | null;
            /** Mitglied */
            member?: number | null;
            /**
             * Erworben am
             * Format: date
             * @description Datum des Erwerbs der Qualifikation
             */
            date_acquired?: string;
            /**
             * Läuft ab am
             * Format: date
             * @description Ablaufdatum (falls erforderlich)
             */
            date_expires?: string | null;
            /**
             * Ausgestellt von
             * @description Organisation oder Person, die die Qualifikation ausgestellt hat
             */
            issued_by?: string;
            /** Notiz */
            note?: string;
        };
        /** @description Serializer für Qualifikationstypen */
        PatchedQualificationTypeRequest: {
            /** @description z.B. 'Grundlehrgang', 'Sprechfunk' */
            name?: string;
            /**
             * Läuft ab
             * @description Wenn aktiviert, ist ein Ablaufdatum erforderlich
             */
            expires?: boolean;
            /**
             * Gültigkeitsdauer (Monate)
             * Format: int64
             * @description Standarddauer in Monaten (nur wenn 'Läuft ab' aktiviert ist)
             */
            validity_period?: number | null;
            /** Beschreibung */
            description?: string;
        };
        PatchedServiceRequest: {
            /** Format: date-time */
            start?: string;
            /**
             * Ende
             * Format: date-time
             */
            end?: string;
            /** Ort */
            place?: string | null;
            /** Thema */
            topic?: string | null;
            /** Beschreibung */
            description?: string | null;
            /** Besondere Vorkommnisse */
            events?: string | null;
            /** Übungsleitung */
            operations_manager?: number[];
        };
        /** @description Serializer für Sonderaufgaben */
        PatchedSpecialTaskRequest: {
            /** Aufgabe */
            task?: number;
            /** Benutzer */
            user?: number | null;
            /** Mitglied */
            member?: number | null;
            /**
             * Startdatum
             * Format: date
             * @description Datum des Beginns der Aufgabe
             */
            start_date?: string;
            /**
             * Enddatum
             * Format: date
             * @description Datum des Endes der Aufgabe (leer = noch aktiv)
             */
            end_date?: string | null;
            /** Notiz */
            note?: string;
        };
        /** @description Serializer für Sonderaufgaben-Typen */
        PatchedSpecialTaskTypeRequest: {
            /** @description z.B. 'Jugendsprecher', 'Kleiderwart' */
            name?: string;
            /** Beschreibung */
            description?: string;
        };
        PatchedStatusRequest: {
            /** Mitgliedschaftsstatus */
            name?: string;
            color?: string;
        };
        PatchedStorageLocationRequest: {
            name?: string;
            /**
             * Übergeordneter Lagerort
             * @description Übergeordneter Lagerort für hierarchische Struktur
             */
            parent?: number | null;
            /**
             * Ist Mitglied
             * @description Markiert diesen Ort als Mitglied-Lagerort
             */
            is_member?: boolean;
            /**
             * Mitglied
             * @description Verknüpftes Mitglied, falls is_member=True
             */
            member?: number | null;
        };
        PatchedTransactionRequest: {
            /** Transaktionstyp */
            transaction_type?: components["schemas"]["TransactionTypeEnum"];
            /** Artikel */
            item?: number | null;
            /** Artikel-Variante */
            item_variant?: number | null;
            /** Quelle */
            source?: number | null;
            /** Ziel */
            target?: number | null;
            /**
             * Menge
             * Format: int64
             */
            quantity?: number;
            /** Notiz */
            note?: string;
        };
        /** @description Basic user serializer for lists */
        PatchedUserRequest: {
            /**
             * E-Mail-Adresse
             * Format: email
             */
            email?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
            /**
             * Mitarbeiter-Status
             * @description Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
             */
            is_staff?: boolean;
            /**
             * Aktiv
             * @description Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
             */
            is_active?: boolean;
        };
        /** @description Serializer für Qualifikationen */
        Qualification: {
            readonly id: number;
            /** Qualifikationstyp */
            type: number;
            readonly type_name: string;
            /** Benutzer */
            user?: number | null;
            readonly user_name: string;
            /** Mitglied */
            member?: number | null;
            readonly member_name: string;
            /**
             * Erworben am
             * Format: date
             * @description Datum des Erwerbs der Qualifikation
             */
            date_acquired: string;
            /**
             * Läuft ab am
             * Format: date
             * @description Ablaufdatum (falls erforderlich)
             */
            date_expires?: string | null;
            /**
             * Ausgestellt von
             * @description Organisation oder Person, die die Qualifikation ausgestellt hat
             */
            issued_by?: string;
            /** Notiz */
            note?: string;
        };
        /** @description Serializer für Qualifikationen */
        QualificationRequest: {
            /** Qualifikationstyp */
            type: number;
            /** Benutzer */
            user?: number | null;
            /** Mitglied */
            member?: number | null;
            /**
             * Erworben am
             * Format: date
             * @description Datum des Erwerbs der Qualifikation
             */
            date_acquired: string;
            /**
             * Läuft ab am
             * Format: date
             * @description Ablaufdatum (falls erforderlich)
             */
            date_expires?: string | null;
            /**
             * Ausgestellt von
             * @description Organisation oder Person, die die Qualifikation ausgestellt hat
             */
            issued_by?: string;
            /** Notiz */
            note?: string;
        };
        /** @description Serializer für Qualifikationstypen */
        QualificationType: {
            readonly id: number;
            /** @description z.B. 'Grundlehrgang', 'Sprechfunk' */
            name: string;
            /**
             * Läuft ab
             * @description Wenn aktiviert, ist ein Ablaufdatum erforderlich
             */
            expires?: boolean;
            /**
             * Gültigkeitsdauer (Monate)
             * Format: int64
             * @description Standarddauer in Monaten (nur wenn 'Läuft ab' aktiviert ist)
             */
            validity_period?: number | null;
            /** Beschreibung */
            description?: string;
        };
        /** @description Serializer für Qualifikationstypen */
        QualificationTypeRequest: {
            /** @description z.B. 'Grundlehrgang', 'Sprechfunk' */
            name: string;
            /**
             * Läuft ab
             * @description Wenn aktiviert, ist ein Ablaufdatum erforderlich
             */
            expires?: boolean;
            /**
             * Gültigkeitsdauer (Monate)
             * Format: int64
             * @description Standarddauer in Monaten (nur wenn 'Läuft ab' aktiviert ist)
             */
            validity_period?: number | null;
            /** Beschreibung */
            description?: string;
        };
        Service: {
            readonly id: number;
            /** Format: date-time */
            start: string;
            /**
             * Ende
             * Format: date-time
             */
            end: string;
            /** Ort */
            place?: string | null;
            /** Thema */
            topic?: string | null;
            /** Beschreibung */
            description?: string | null;
            /** Besondere Vorkommnisse */
            events?: string | null;
            /** Übungsleitung */
            operations_manager?: number[];
            readonly attendees: number[];
        };
        ServiceRequest: {
            /** Format: date-time */
            start: string;
            /**
             * Ende
             * Format: date-time
             */
            end: string;
            /** Ort */
            place?: string | null;
            /** Thema */
            topic?: string | null;
            /** Beschreibung */
            description?: string | null;
            /** Besondere Vorkommnisse */
            events?: string | null;
            /** Übungsleitung */
            operations_manager?: number[];
        };
        /** @description Serializer für Sonderaufgaben */
        SpecialTask: {
            readonly id: number;
            /** Aufgabe */
            task: number;
            readonly task_name: string;
            /** Benutzer */
            user?: number | null;
            readonly user_name: string;
            /** Mitglied */
            member?: number | null;
            readonly member_name: string;
            /**
             * Startdatum
             * Format: date
             * @description Datum des Beginns der Aufgabe
             */
            start_date: string;
            /**
             * Enddatum
             * Format: date
             * @description Datum des Endes der Aufgabe (leer = noch aktiv)
             */
            end_date?: string | null;
            /** Notiz */
            note?: string;
        };
        /** @description Serializer für Sonderaufgaben */
        SpecialTaskRequest: {
            /** Aufgabe */
            task: number;
            /** Benutzer */
            user?: number | null;
            /** Mitglied */
            member?: number | null;
            /**
             * Startdatum
             * Format: date
             * @description Datum des Beginns der Aufgabe
             */
            start_date: string;
            /**
             * Enddatum
             * Format: date
             * @description Datum des Endes der Aufgabe (leer = noch aktiv)
             */
            end_date?: string | null;
            /** Notiz */
            note?: string;
        };
        /** @description Serializer für Sonderaufgaben-Typen */
        SpecialTaskType: {
            readonly id: number;
            /** @description z.B. 'Jugendsprecher', 'Kleiderwart' */
            name: string;
            /** Beschreibung */
            description?: string;
        };
        /** @description Serializer für Sonderaufgaben-Typen */
        SpecialTaskTypeRequest: {
            /** @description z.B. 'Jugendsprecher', 'Kleiderwart' */
            name: string;
            /** Beschreibung */
            description?: string;
        };
        /**
         * @description * `A` - Anwesend
         *     * `E` - Entschuldigt
         *     * `F` - Fehlend
         * @enum {string}
         */
        StateEnum: "A" | "E" | "F";
        Status: {
            readonly id: number;
            /** Mitgliedschaftsstatus */
            name?: string;
            color?: string;
        };
        StatusRequest: {
            /** Mitgliedschaftsstatus */
            name?: string;
            color?: string;
        };
        Stock: {
            readonly id: number;
            /** Artikel */
            item?: number | null;
            readonly item_name: string;
            /** Artikel-Variante */
            item_variant?: number | null;
            readonly variant_display: string;
            /** Lagerort */
            location: number;
            readonly location_name: string;
            /**
             * Menge
             * Format: int64
             */
            quantity?: number;
            readonly category_id: string;
        };
        StorageLocation: {
            readonly id: number;
            name: string;
            /**
             * Übergeordneter Lagerort
             * @description Übergeordneter Lagerort für hierarchische Struktur
             */
            parent?: number | null;
            readonly parent_name: string;
            /**
             * Ist Mitglied
             * @description Markiert diesen Ort als Mitglied-Lagerort
             */
            is_member?: boolean;
            /**
             * Mitglied
             * @description Verknüpftes Mitglied, falls is_member=True
             */
            member?: number | null;
            readonly full_path: string;
        };
        StorageLocationRequest: {
            name: string;
            /**
             * Übergeordneter Lagerort
             * @description Übergeordneter Lagerort für hierarchische Struktur
             */
            parent?: number | null;
            /**
             * Ist Mitglied
             * @description Markiert diesen Ort als Mitglied-Lagerort
             */
            is_member?: boolean;
            /**
             * Mitglied
             * @description Verknüpftes Mitglied, falls is_member=True
             */
            member?: number | null;
        };
        TokenObtainPair: {
            readonly access: string;
            readonly refresh: string;
        };
        TokenObtainPairRequest: {
            username: string;
            password: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
        TokenVerifyRequest: {
            token: string;
        };
        Transaction: {
            readonly id: number;
            /** Transaktionstyp */
            transaction_type: components["schemas"]["TransactionTypeEnum"];
            /** Artikel */
            item?: number | null;
            /** Artikel-Variante */
            item_variant?: number | null;
            /** Quelle */
            source?: number | null;
            /** Ziel */
            target?: number | null;
            /**
             * Menge
             * Format: int64
             */
            quantity: number;
            /**
             * Datum
             * Format: date-time
             */
            readonly date: string;
            /** Notiz */
            note?: string;
            /** Benutzer */
            readonly user: number | null;
            readonly item_name: string;
            readonly source_name: string;
            readonly target_name: string;
            readonly user_username: string;
        };
        TransactionRequest: {
            /** Transaktionstyp */
            transaction_type: components["schemas"]["TransactionTypeEnum"];
            /** Artikel */
            item?: number | null;
            /** Artikel-Variante */
            item_variant?: number | null;
            /** Quelle */
            source?: number | null;
            /** Ziel */
            target?: number | null;
            /**
             * Menge
             * Format: int64
             */
            quantity: number;
            /** Notiz */
            note?: string;
        };
        /**
         * @description * `IN` - Eingang
         *     * `OUT` - Ausgang
         *     * `MOVE` - Umlagerung
         *     * `LOAN` - Ausleihe
         *     * `RETURN` - Rückgabe
         *     * `DISCARD` - Aussortierung
         * @enum {string}
         */
        TransactionTypeEnum: "IN" | "OUT" | "MOVE" | "LOAN" | "RETURN" | "DISCARD";
        /** @description Basic user serializer for lists */
        User: {
            readonly id: number;
            /**
             * Benutzername
             * @description Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
             */
            readonly username: string;
            /**
             * E-Mail-Adresse
             * Format: email
             */
            email?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
            readonly full_name: string;
            /**
             * Mitarbeiter-Status
             * @description Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
             */
            is_staff?: boolean;
            /**
             * Aktiv
             * @description Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
             */
            is_active?: boolean;
            readonly avatar_url: string;
        };
        /** @description Complete user information including permissions */
        UserInfo: {
            readonly id: number;
            /**
             * Benutzername
             * @description Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
             */
            readonly username: string;
            /**
             * E-Mail-Adresse
             * Format: email
             */
            email?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
            readonly full_name: string;
            phone?: string;
            mobile_phone?: string;
            street?: string;
            zip_code?: string;
            city?: string;
            /**
             * Mitarbeiter-Status
             * @description Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
             */
            readonly is_staff: boolean;
            /**
             * Aktiv
             * @description Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
             */
            is_active?: boolean;
            /**
             * Administrator-Status
             * @description Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
             */
            readonly is_superuser: boolean;
            /**
             * Mitglied seit
             * Format: date-time
             */
            readonly date_joined: string;
            /**
             * Letzte Anmeldung
             * Format: date-time
             */
            readonly last_login: string | null;
            /** Format: uri */
            avatar?: string;
            readonly avatar_url: string;
            dsgvo_internal?: boolean;
            dsgvo_external?: boolean;
            readonly groups: components["schemas"]["Group"][];
            readonly permissions: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_token_auth_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["AuthTokenRequest"];
                "multipart/form-data": components["schemas"]["AuthTokenRequest"];
                "application/json": components["schemas"]["AuthTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthToken"];
                };
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPairRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairRequest"];
                "multipart/form-data": components["schemas"]["TokenObtainPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    auth_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_verify_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerifyRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenVerifyRequest"];
                "multipart/form-data": components["schemas"]["TokenVerifyRequest"];
            };
        };
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    event_types_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEventTypeList"];
                };
            };
        };
    };
    event_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EventTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EventTypeRequest"];
                "multipart/form-data": components["schemas"]["EventTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventType"];
                };
            };
        };
    };
    event_types_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventType"];
                };
            };
        };
    };
    event_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EventTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EventTypeRequest"];
                "multipart/form-data": components["schemas"]["EventTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventType"];
                };
            };
        };
    };
    event_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    event_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEventTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedEventTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedEventTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventType"];
                };
            };
        };
    };
    events_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                member?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                type?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEventList"];
                };
            };
        };
    };
    events_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EventRequest"];
                "multipart/form-data": components["schemas"]["EventRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
        };
    };
    events_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
        };
    };
    events_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EventRequest"];
                "multipart/form-data": components["schemas"]["EventRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
        };
    };
    events_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    events_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEventRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedEventRequest"];
                "multipart/form-data": components["schemas"]["PatchedEventRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
        };
    };
    groups_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupList"];
                };
            };
        };
    };
    groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GroupRequest"];
                "multipart/form-data": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GroupRequest"];
                "multipart/form-data": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGroupRequest"];
                "multipart/form-data": components["schemas"]["PatchedGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    inventory_categories_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                name?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCategoryList"];
                };
            };
        };
    };
    inventory_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoryRequest"];
                "multipart/form-data": components["schemas"]["CategoryRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    inventory_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Kategorie. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    inventory_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Kategorie. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CategoryRequest"];
                "multipart/form-data": components["schemas"]["CategoryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    inventory_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Kategorie. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inventory_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Kategorie. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategoryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategoryRequest"];
                "multipart/form-data": components["schemas"]["PatchedCategoryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    inventory_categories_items_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Kategorie. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    inventory_items_list: {
        parameters: {
            query?: {
                category?: number;
                is_variant_parent?: boolean;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedItemList"];
                };
            };
        };
    };
    inventory_items_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ItemRequest"];
                "multipart/form-data": components["schemas"]["ItemRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
        };
    };
    inventory_items_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
        };
    };
    inventory_items_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ItemRequest"];
                "multipart/form-data": components["schemas"]["ItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
        };
    };
    inventory_items_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inventory_items_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedItemRequest"];
                "multipart/form-data": components["schemas"]["PatchedItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
        };
    };
    inventory_items_stock_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
        };
    };
    inventory_items_variants_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
        };
    };
    inventory_items_search_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
        };
    };
    inventory_locations_list: {
        parameters: {
            query?: {
                is_member?: boolean;
                /** @description Number of results to return per page. */
                limit?: number;
                member?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                parent?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStorageLocationList"];
                };
            };
        };
    };
    inventory_locations_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorageLocationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StorageLocationRequest"];
                "multipart/form-data": components["schemas"]["StorageLocationRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageLocation"];
                };
            };
        };
    };
    inventory_locations_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Lagerort. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageLocation"];
                };
            };
        };
    };
    inventory_locations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Lagerort. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorageLocationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StorageLocationRequest"];
                "multipart/form-data": components["schemas"]["StorageLocationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageLocation"];
                };
            };
        };
    };
    inventory_locations_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Lagerort. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inventory_locations_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Lagerort. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStorageLocationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStorageLocationRequest"];
                "multipart/form-data": components["schemas"]["PatchedStorageLocationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageLocation"];
                };
            };
        };
    };
    inventory_locations_stock_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Lagerort. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageLocation"];
                };
            };
        };
    };
    inventory_stocks_list: {
        parameters: {
            query?: {
                item?: number;
                item_variant?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                location?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStockList"];
                };
            };
        };
    };
    inventory_stocks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestand. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Stock"];
                };
            };
        };
    };
    inventory_transactions_list: {
        parameters: {
            query?: {
                item?: number;
                item_variant?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description A search term. */
                search?: string;
                source?: number;
                target?: number;
                /** @description * `IN` - Eingang
                 *     * `OUT` - Ausgang
                 *     * `MOVE` - Umlagerung
                 *     * `LOAN` - Ausleihe
                 *     * `RETURN` - Rückgabe
                 *     * `DISCARD` - Aussortierung */
                transaction_type?: "DISCARD" | "IN" | "LOAN" | "MOVE" | "OUT" | "RETURN";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTransactionList"];
                };
            };
        };
    };
    inventory_transactions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionRequest"];
                "multipart/form-data": components["schemas"]["TransactionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    inventory_transactions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Transaktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    inventory_transactions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Transaktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TransactionRequest"];
                "multipart/form-data": components["schemas"]["TransactionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    inventory_transactions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Transaktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inventory_transactions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Transaktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTransactionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTransactionRequest"];
                "multipart/form-data": components["schemas"]["PatchedTransactionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
        };
    };
    inventory_variants_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                parent_item?: number;
                parent_item__category?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedItemVariantList"];
                };
            };
        };
    };
    inventory_variants_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemVariantRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ItemVariantRequest"];
                "multipart/form-data": components["schemas"]["ItemVariantRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemVariant"];
                };
            };
        };
    };
    inventory_variants_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel-Variante. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemVariant"];
                };
            };
        };
    };
    inventory_variants_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel-Variante. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemVariantRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ItemVariantRequest"];
                "multipart/form-data": components["schemas"]["ItemVariantRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemVariant"];
                };
            };
        };
    };
    inventory_variants_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel-Variante. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inventory_variants_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel-Variante. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedItemVariantRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedItemVariantRequest"];
                "multipart/form-data": components["schemas"]["PatchedItemVariantRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemVariant"];
                };
            };
        };
    };
    inventory_variants_stock_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Artikel-Variante. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemVariant"];
                };
            };
        };
    };
    members_list: {
        parameters: {
            query?: {
                canSwimm?: boolean;
                /** @description Filter by group ID */
                group?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Order by: name, lastname, birthday, joined */
                ordering?: string;
                /** @description Search by name, lastname, email */
                search?: string;
                /** @description Filter by status ID */
                status?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMemberListList"];
                };
            };
        };
    };
    members_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MemberCreateUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MemberCreateUpdateRequest"];
                "multipart/form-data": components["schemas"]["MemberCreateUpdateRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberCreateUpdate"];
                };
            };
        };
    };
    members_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this member. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberDetail"];
                };
            };
        };
    };
    members_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this member. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MemberCreateUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MemberCreateUpdateRequest"];
                "multipart/form-data": components["schemas"]["MemberCreateUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberCreateUpdate"];
                };
            };
        };
    };
    members_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this member. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    members_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this member. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMemberCreateUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMemberCreateUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedMemberCreateUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberCreateUpdate"];
                };
            };
        };
    };
    members_events_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this member. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberDetail"];
                };
            };
        };
    };
    members_parents_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this member. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberDetail"];
                };
            };
        };
    };
    members_statistics_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberDetail"];
                };
            };
        };
    };
    orders_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                member?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                order_date?: string;
                ordered_by?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrderList"];
                };
            };
        };
    };
    orders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    orders_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellung. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    orders_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellung. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderRequest"];
                "multipart/form-data": components["schemas"]["OrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    orders_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellung. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orders_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellung. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    orders_items_list: {
        parameters: {
            query?: {
                item?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                order?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                size?: string;
                status?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrderItemList"];
                };
            };
        };
    };
    orders_items_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderItemRequest"];
                "multipart/form-data": components["schemas"]["OrderItemRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    orders_items_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellartikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    orders_items_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellartikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderItemRequest"];
                "multipart/form-data": components["schemas"]["OrderItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    orders_items_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellartikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orders_items_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellartikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderItemRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    orders_orderable_items_list: {
        parameters: {
            query?: {
                category?: string;
                has_sizes?: boolean;
                is_active?: boolean;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrderableItemList"];
                };
            };
        };
    };
    orders_orderable_items_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderableItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderableItemRequest"];
                "multipart/form-data": components["schemas"]["OrderableItemRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderableItem"];
                };
            };
        };
    };
    orders_orderable_items_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellbarer Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderableItem"];
                };
            };
        };
    };
    orders_orderable_items_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellbarer Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderableItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderableItemRequest"];
                "multipart/form-data": components["schemas"]["OrderableItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderableItem"];
                };
            };
        };
    };
    orders_orderable_items_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellbarer Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orders_orderable_items_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellbarer Artikel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderableItemRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderableItemRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderableItemRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderableItem"];
                };
            };
        };
    };
    orders_statuses_list: {
        parameters: {
            query?: {
                is_active?: boolean;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrderStatusList"];
                };
            };
        };
    };
    orders_statuses_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderStatusRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderStatusRequest"];
                "multipart/form-data": components["schemas"]["OrderStatusRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderStatus"];
                };
            };
        };
    };
    orders_statuses_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellstatus. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderStatus"];
                };
            };
        };
    };
    orders_statuses_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellstatus. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderStatusRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderStatusRequest"];
                "multipart/form-data": components["schemas"]["OrderStatusRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderStatus"];
                };
            };
        };
    };
    orders_statuses_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellstatus. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    orders_statuses_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Bestellstatus. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderStatusRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderStatusRequest"];
                "multipart/form-data": components["schemas"]["PatchedOrderStatusRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderStatus"];
                };
            };
        };
    };
    parents_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedParentList"];
                };
            };
        };
    };
    parents_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ParentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ParentRequest"];
                "multipart/form-data": components["schemas"]["ParentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parent"];
                };
            };
        };
    };
    parents_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parent"];
                };
            };
        };
    };
    parents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ParentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ParentRequest"];
                "multipart/form-data": components["schemas"]["ParentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parent"];
                };
            };
        };
    };
    parents_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    parents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedParentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedParentRequest"];
                "multipart/form-data": components["schemas"]["PatchedParentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parent"];
                };
            };
        };
    };
    qualifications_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                member?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                type?: number;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedQualificationList"];
                };
            };
        };
    };
    qualifications_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QualificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["QualificationRequest"];
                "multipart/form-data": components["schemas"]["QualificationRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Qualification"];
                };
            };
        };
    };
    qualifications_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikation. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Qualification"];
                };
            };
        };
    };
    qualifications_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikation. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QualificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["QualificationRequest"];
                "multipart/form-data": components["schemas"]["QualificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Qualification"];
                };
            };
        };
    };
    qualifications_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikation. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    qualifications_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikation. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedQualificationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedQualificationRequest"];
                "multipart/form-data": components["schemas"]["PatchedQualificationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Qualification"];
                };
            };
        };
    };
    qualifications_types_list: {
        parameters: {
            query?: {
                expires?: boolean;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedQualificationTypeList"];
                };
            };
        };
    };
    qualifications_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QualificationTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["QualificationTypeRequest"];
                "multipart/form-data": components["schemas"]["QualificationTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QualificationType"];
                };
            };
        };
    };
    qualifications_types_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikationstyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QualificationType"];
                };
            };
        };
    };
    qualifications_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikationstyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QualificationTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["QualificationTypeRequest"];
                "multipart/form-data": components["schemas"]["QualificationTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QualificationType"];
                };
            };
        };
    };
    qualifications_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikationstyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    qualifications_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Qualifikationstyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedQualificationTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedQualificationTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedQualificationTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QualificationType"];
                };
            };
        };
    };
    servicebook_attandances_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                person?: number;
                /** @description A search term. */
                search?: string;
                service?: number;
                /** @description * `A` - Anwesend
                 *     * `E` - Entschuldigt
                 *     * `F` - Fehlend */
                state?: "A" | "E" | "F" | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAttendanceList"];
                };
            };
        };
    };
    servicebook_attandances_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AttendanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttendanceRequest"];
                "multipart/form-data": components["schemas"]["AttendanceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    servicebook_attandances_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    servicebook_attandances_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AttendanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AttendanceRequest"];
                "multipart/form-data": components["schemas"]["AttendanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    servicebook_attandances_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    servicebook_attandances_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this attendance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAttendanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAttendanceRequest"];
                "multipart/form-data": components["schemas"]["PatchedAttendanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attendance"];
                };
            };
        };
    };
    servicebook_services_list: {
        parameters: {
            query?: {
                attendees?: number[];
                description?: string;
                end?: string;
                events?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                operations_manager?: number[];
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                place?: string;
                /** @description A search term. */
                search?: string;
                start?: string;
                topic?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedServiceList"];
                };
            };
        };
    };
    servicebook_services_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ServiceRequest"];
                "multipart/form-data": components["schemas"]["ServiceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
        };
    };
    servicebook_services_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
        };
    };
    servicebook_services_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ServiceRequest"];
                "multipart/form-data": components["schemas"]["ServiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
        };
    };
    servicebook_services_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    servicebook_services_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this service. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedServiceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedServiceRequest"];
                "multipart/form-data": components["schemas"]["PatchedServiceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
        };
    };
    settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    specialtasks_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                member?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                task?: number;
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSpecialTaskList"];
                };
            };
        };
    };
    specialtasks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecialTaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SpecialTaskRequest"];
                "multipart/form-data": components["schemas"]["SpecialTaskRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTask"];
                };
            };
        };
    };
    specialtasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgabe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTask"];
                };
            };
        };
    };
    specialtasks_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgabe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecialTaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SpecialTaskRequest"];
                "multipart/form-data": components["schemas"]["SpecialTaskRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTask"];
                };
            };
        };
    };
    specialtasks_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgabe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    specialtasks_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgabe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSpecialTaskRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSpecialTaskRequest"];
                "multipart/form-data": components["schemas"]["PatchedSpecialTaskRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTask"];
                };
            };
        };
    };
    specialtasks_types_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSpecialTaskTypeList"];
                };
            };
        };
    };
    specialtasks_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecialTaskTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SpecialTaskTypeRequest"];
                "multipart/form-data": components["schemas"]["SpecialTaskTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTaskType"];
                };
            };
        };
    };
    specialtasks_types_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgaben-Typ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTaskType"];
                };
            };
        };
    };
    specialtasks_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgaben-Typ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecialTaskTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SpecialTaskTypeRequest"];
                "multipart/form-data": components["schemas"]["SpecialTaskTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTaskType"];
                };
            };
        };
    };
    specialtasks_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgaben-Typ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    specialtasks_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Sonderaufgaben-Typ. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSpecialTaskTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSpecialTaskTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedSpecialTaskTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialTaskType"];
                };
            };
        };
    };
    statuses_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStatusList"];
                };
            };
        };
    };
    statuses_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StatusRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StatusRequest"];
                "multipart/form-data": components["schemas"]["StatusRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    statuses_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Status. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    statuses_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Status. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StatusRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StatusRequest"];
                "multipart/form-data": components["schemas"]["StatusRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    statuses_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Status. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    statuses_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Status. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStatusRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStatusRequest"];
                "multipart/form-data": components["schemas"]["PatchedStatusRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    userinfo_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfo"];
                };
            };
        };
    };
    users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserRequest"];
                "multipart/form-data": components["schemas"]["PatchedUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfo"];
                };
            };
        };
    };
    "members_members.xlsx_retrieve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
